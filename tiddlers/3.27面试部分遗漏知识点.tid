created: 20240328095036936
creator: kina0630
modified: 20240328151243541
modifier: kina0630
tags: 工作 学习
title: 3.27面试部分遗漏知识点

!! 1. mysqlb+树，聚簇索引，以及两者之间是否有耦合
MySQL中的回表查询通常发生在使用InnoDB存储引擎时，特别是当通过非聚簇索引（也称为二级索引或辅助索引）查询数据而需要访问完整的行数据时。这个过程包括两个主要步骤：

通过辅助索引定位行的主键：当查询操作使用非聚簇索引时，数据库首先使用这个索引来找到对应行的主键值。辅助索引的叶子节点不直接存储完整的行数据，而是存储了行数据的主键值。

通过主键值回表查询聚簇索引：得到主键值后，数据库再使用这个值在聚簇索引中定位并检索完整的行数据。因为InnoDB的表数据是按照聚簇索引（即主键索引）的顺序物理存储的，所以必须“回表”到聚簇索引中去获取完整的数据行。

回表查询的性能影响
增加磁盘I/O：回表操作可能导致额外的磁盘I/O，因为需要先通过辅助索引找到主键，然后再通过聚簇索引找到完整的数据行。如果这两步操作所需的数据页不在内存中，则需要从磁盘中读取，这会降低查询性能。
影响查询速度：相比直接通过聚簇索引查询，回表查询增加了步骤，可能会导致查询速度变慢。
优化回表查询
为了减少回表查询的性能影响，可以考虑以下优化策略：

合理设计索引：包括频繁查询的列在辅助索引中，可以减少回表的需求。例如，如果一个查询经常需要某几列的数据，可以考虑创建一个包含这些列和查询条件列的复合索引。
使用覆盖索引：尽可能使用覆盖索引，即查询只需通过索引就能返回结果，不需要访问数据行。如果一个查询可以通过辅助索引直接返回所需的所有列，那么就不需要回表操作。
保持数据的物理顺序：虽然聚簇索引自然就是按照物理顺序存储的，但是表中的数据随着时间的推移可能会发生碎片化。定期优化（例如，使用OPTIMIZE TABLE命令）可以改善数据的物理排列，从而提高通过聚簇索引访问数据的速度。
通过理解回表查询的工作机制和潜在的性能影响，开发者可以更好地设计数据库索引和优化查询性能。


!! 2. c++中的malloc与new的区别
1. malloc仅分配内存，new分配内存且调用构造函数对对象进行初始化

2. malloc成功后返回void*，new成功后返回对应类型的指针

3. malloc无法分配内存时会返回NULL，new无法分配内存时会抛出一个std::bad_alloc异常(若使用了nothrow版本的new，会返回nullptr而不会抛出异常)


!! 3. c++中虚函数如何实现
1. 虚表的创建：对于每一个包含虚函数的类，编译器在编译时会生成一个虚表。这个虚表包含了指向该类所有虚函数的指针。如果类继承自基类，那么它的虚表还会包括来自基类的虚函数指针，以保持继承关系。

2. 对象的虚指针（vptr）：每一个类的对象都会包含一个指针（vptr），指向其类的虚表。当创建一个对象时，构造函数会设置这个vptr以指向正确的虚表。

3. 虚函数的调用：当通过基类的指针或引用调用虚函数时，编译器会生成代码来首先访问对象的vptr，然后通过vptr访问虚表，最后通过虚表调用正确版本的函数。这一切都在运行时发生，从而实现了动态绑定。

4. 覆盖（Overriding）：如果派生类提供了一个虚函数的新实现，它的虚表中该函数的条目会被更新为指向新的函数。这样，当通过基类的指针或引用调用该虚函数时，会执行派生类中的版本。

!! 4. 模板是编译期多态
运行期多态通过虚函数与继承实现

模板通过泛型编程允许函数或类操作不同的数据类型而不需要重写代码。编译器在编译期间根据模板的使用情况生成特定类型的实例代码，这个过程称为模板实例化。因此，模板的多态性是在编译时确定的，与运行时多态（通过虚函数实现）形成对比。

特点

类型安全：使用模板可以保证类型安全，因为所有的类型检查都在编译时完成。

效率：由于编译器生成了针对具体类型的代码，所以使用模板的代码运行效率很高，没有运行时的类型检查或转换开销。

灵活性：模板使得编写通用代码变得更加容易，增加了代码的复用性。

!! 5. 主机访问一个不存在ip会发生什么
通常会导致连接尝试失败，具体表现为DNS解析失败、目标不可达错误、请求超时或应用层报告的超时错误。

DNS 解析：首先，如果主机''通过域名''访问目标，它会请求DNS服务器将域名解析为IP地址。如果该域名不存在或配置错误，DNS解析将失败，返回一个“域名不存在”或“DNS解析失败”的错误，这时候过程会终止，不会继续尝试连接到一个IP地址。

ARP 解析（如果适用）：如果目标IP地址在同一个''局域网''中，主机会使用ARP（地址解析协议）尝试获取目标IP地址对应的物理（MAC）地址。如果ARP解析失败（即局域网中没有设备响应该IP地址），主机通常会报告一个错误，指出目标不可达。

路由决策：如果目标IP地址不在同一个局域网中，主机会将数据包发送到配置的默认网关（通常是路由器）。然后，根据路由器的路由表，数据包会被转发到下一个路由器，这个过程会一直持续，直到数据包到达目标网络，或者在路由过程中被丢弃。

目标不可达：如果在某个点上，路由器决定无法将数据包进一步路由到目标地址（因为没有有效的路由路径），或者达到了数据包的生存时间（TTL）限制，路由器将丢弃该数据包并向原始发送者发送一个ICMP目标不可达消息。

超时：如果主机没有收到任何关于它发送的数据包的回应，它最终会因为超时而终止尝试。这通常会触发一个错误，如“请求超时”或“目标主机不可达”。

应用层超时：在某些情况下，如果''应用程序''设置了自己的超时参数（例如，Web浏览器在尝试建立HTTP连接时），即使网络层没有报告超时，应用程序也可能因为在指定时间内没有成功接收到数据而报告超时错误。

